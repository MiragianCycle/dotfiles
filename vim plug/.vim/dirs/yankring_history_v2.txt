$,v
list#mylist>li*10{list items},V
div#mylist>li*10 <list-items></list-items>,V
},v
List Item,v
-,v
Emmet,v
div#mylist>li*10{list-item },V
<list></list>,V
html5,V
,V
Untitled,v
https://www.youtube.com/watch?v=38AkaW39USw,v
Spectral by HTML5 UP,v
<,v
		<title>UP</title>,V
Spectral by HTML5 ,v
thirupachi,v
handbrake mov to mov,v
|Brand Positioning and Strategy | 50,000 | Strategy Document | ,V
u,v
Workshop with Dr Mihirini Sunday, August 8 · 12:30 – 4:00pmGoogle Meet joining infoVideo call link: https://meet.google.com/kkm-ecvv-srp,v
trajanus/,v
#+STARTUP: overview * Interface Tweaks** Startup, general settings#+BEGIN_SRC emacs-lisp;; Remove initial buffer, set index file(setq inhibit-startup-message t)(setq initial-buffer-choice "index.org");; Hide Scroll bar,menu bar, tool bar(scroll-bar-mode -1)(tool-bar-mode -1)(menu-bar-mode -1);; Line numbering(global-display-line-numbers-mode)(setq display-line-numbers-type 'relative);; Display battery for when in full screen mode(display-battery-mode t);; Keybindings(global-set-key (kbd "<f5>") 'revert-buffer)(global-set-key (kbd "<f3>") 'org-export-dispatch)(global-set-key (kbd "<f6>") 'eshell) (global-set-key (kbd "<f7>") 'ranger) (global-set-key (kbd "<f8>") 'magit) ;; Misc stuff(fset 'yes-or-no-p 'y-or-n-p)(setenv "HOME" "/home/trajanus/")(server-start)#+END_SRC#+RESULTS:** Evil mode stuff#+BEGIN_SRC emacs-lisp(use-package powerline-evil  :ensure t)(powerline-evil-vim-theme)(powerline-evil-vim-color-theme)(define-key evil-ex-map "e" 'find-file)(define-key evil-ex-map "W" 'save-buffer)#+END_SRC** Theming & Aesthethic#+BEGIN_SRC emacs-lisp(use-package dracula-theme   :config   (load-theme 'dracula)   :ensure t)   (global-hl-line-mode t) ;; This highlights the current line in the buffer(use-package beacon ;; This applies a beacon effect to the highlighted line   :ensure t   :config   (beacon-mode 1))#+END_SRC* Packages** Try #+BEGIN_SRC emacs-lisp(use-package try  :ensure t)#+END_SRC** Which-key#+BEGIN_SRC emacs-lisp(use-package which-key  :config     (setq which-key-idle-delay 0.3)    (setq which-key-popup-type 'frame)    (which-key-mode)    (which-key-setup-minibuffer)    (set-face-attribute 'which-key-local-map-description-face nil        :weight 'bold)  :ensure t)#+END_SRC** Helm for navigation#+BEGIN_SRC emacs-lisp(use-package helm  :init    (require 'helm-config)    (setq helm-split-window-in-side-p t          helm-move-to-line-cycle-in-source t)  :config     (helm-mode 1) ;; Most of Emacs prompts become helm-enabled    (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates    (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )    (define-key evil-ex-map "b" 'helm-buffers-list) ;; List buffers ( Vim way )    (global-set-key (kbd "C-x r b") 'helm-bookmarks) ;; Bookmarks menu    (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm    (global-set-key (kbd "M-c") 'helm-calcul-expression) ;; Use Helm for calculations    (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding    (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface    (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu    (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste  :ensure t)#+END_SRC#+RESULTS:: t** Company for Auto completion#+BEGIN_SRC emacs-lisp  (use-package company    :ensure t    :config    (global-company-mode))  (use-package helm-company    :after (company)    (define-key company-mode-map (kbd "C-:") 'helm-company)    (define-key company-active-map (kbd "C-:") 'helm-company)    :ensure t)  (use-package company-quickhelp    :after (company)    :hook (company-mode . company-quickhelp-mode)    :config      (setq company-quickhelp-delay 0.5)    :ensure t)#+END_SRC** Magit#+BEGIN_SRC emacs-lisp(use-package magit  :ensure t)#+END_SRC** Flycheck#+BEGIN_SRC emacs-lisp(use-package flycheck  :ensure t  :init  (global-flycheck-mode t))#+END_SRC   ** Elpy#+BEGIN_SRC emacs-lisp(use-package elpy  :ensure t  :config  (elpy-enable))#+END_SRC** Yasnippet#+BEGIN_SRC emacs-lisp(use-package yasnippet  :ensure t  :init  (yas-global-mode 1))#+END_SRC** Treemacs#+BEGIN_SRC emacs-lisp(use-package treemacs  :ensure t  :defer t  :init  (with-eval-after-load 'winum    (define-key winum-keymap (kbd "M-0") 'treemacs-select-window))  :config  (progn    (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)          treemacs-deferred-git-apply-delay   0.5          treemacs-display-in-side-window     t          treemacs-file-event-delay           5000          treemacs-file-follow-delay          0.2          treemacs-follow-after-init          t          treemacs-follow-recenter-distance   0.1          treemacs-git-command-pipe           ""          treemacs-goto-tag-strategy          'refetch-index          treemacs-indentation                2          treemacs-indentation-string         " "          treemacs-is-never-other-window      nil          treemacs-max-git-entries            5000          treemacs-no-png-images              nil          treemacs-no-delete-other-windows    t          treemacs-project-follow-cleanup     nil          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)          treemacs-recenter-after-file-follow nil          treemacs-recenter-after-tag-follow  nil          treemacs-show-cursor                nil          treemacs-show-hidden-files          nil          treemacs-silent-filewatch           nil          treemacs-silent-refresh             nil          treemacs-sorting                    'alphabetic-desc          treemacs-space-between-root-nodes   t          treemacs-tag-follow-cleanup         t          treemacs-tag-follow-delay           1.5          treemacs-width                      35)    ;; The default width and height of the icons is 22 pixels. If you are    ;; using a Hi-DPI display, uncomment this to double the icon size.    ;;(treemacs-resize-icons 44)    (treemacs-follow-mode t)    (treemacs-filewatch-mode t)    (treemacs-fringe-indicator-mode t)    (pcase (cons (not (null (executable-find "git")))                 (not (null (executable-find "python3"))))      (`(t . t)       (treemacs-git-mode 'deferred))      (`(t . _)       (treemacs-git-mode 'simple))))  :bind  (:map global-map        ("M-0"       . treemacs-select-window)        ("C-x t 1"   . treemacs-delete-other-windows)        ("C-x t t"   . treemacs)        ("C-x t B"   . treemacs-bookmark)        ("C-x t C-t" . treemacs-find-file)        ("C-x t M-t" . treemacs-find-tag)))(use-package treemacs-evil  :after treemacs evil  :ensure t)(use-package treemacs-projectile  :after treemacs projectile  :ensure t)#+END_SRC** Reveal.js#+BEGIN_SRC emacs-lisp  (use-package ox-reveal  :ensure ox-reveal)  (setenv "PATH" (concat (getenv "PATH") ":/opt/texlive/2019/bin/x86_64-linux"))    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")  (setq org-reveal-mathjax t)  (use-package htmlize     :ensure t)#+END_SRC#+RESULTS:#+RESULTS:** Dired and Ranger for File Management#+BEGIN_SRC emacs-lisp  ;(use-package dired     ;:ensure t     ;:config (require 'dired))       ;;(add-hook 'dired-load-hook	    ;;(function (lambda () (load "dired-x"))))  (use-package ranger    :ensure t)  (setq ranger-preview-file true)#+END_SRC#+RESULTS:** Auto-Complete#+BEGIN_SRC emacs-lisp(use-package auto-complete  :ensure t  :config   (ac-config-default))#+END_SRC** Emmet-mode#+BEGIN_SRC emacs-lisp(use-package emmet-mode  :ensure t  :config     (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.)(use-package ac-emmet  :ensure t  :config    (add-hook 'sgml-mode-hook 'ac-emmet-html-setup)    (add-hook 'css-mode-hook 'ac-emmet-css-setup))#+END_SRC** Markdown-mode#+BEGIN_SRC emacs-lisp(use-package markdown-mode  :ensure t  :mode (("README\\.md\\'" . gfm-mode)         ("\\.md\\'" . markdown-mode)         ("\\.markdown\\'" . markdown-mode))  :init (setq markdown-command "multimarkdown"))  #+END_SRC#+RESULTS:: ((\.markdown\' . markdown-mode) (\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.html?\' . web-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (.*\.ipynb\' . ein:ipynb-mode) (/git-rebase-todo\' . git-rebase-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:avs\|bmp[23]?\|c\(?:als?\|myka?\|u[rt]\)\|d\(?:c[mx]\|ds\|px\)\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|m\(?:iff\|ng\|s\(?:l\|vg\)\|tv\)\|otb\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:as\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))** Yang-mode#+BEGIN_SRC emacs-lisp     (autoload 'yang-mode "yang-mode" "Major mode for editing YANG modules." t)     (add-to-list 'auto-mode-alist '("\\.yang$" . yang-mode))#+END_SRC#+RESULTS:: ((\.yang$ . yang-mode) (\.yang\' . yang-mode) (\.html?\' . web-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.hva\' . latex-mode) (\.drv\' . latex-mode) (.*\.ipynb\' . ein:ipynb-mode) (/git-rebase-todo\' . git-rebase-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.\(?:avs\|bmp[23]?\|c\(?:als?\|myka?\|u[rt]\)\|d\(?:c[mx]\|ds\|px\)\|f\(?:ax\|its\)\|gif\(?:87\)?\|hrz\|ic\(?:on\|[bo]\)\|j\(?:\(?:pe\|[np]\)g\)\|m\(?:iff\|ng\|s\(?:l\|vg\)\|tv\)\|otb\|p\(?:bm\|c\(?:ds\|[dltx]\)\|db\|gm\|i\(?:ct\|x\)\|jpeg\|n\(?:g\(?:24\|32\|8\)\|[gm]\)\|pm\|sd\|tif\|wp\)\|r\(?:as\|gb[ao]?\|l[ae]\)\|s\(?:c[rt]\|fw\|gi\|un\|vgz?\)\|t\(?:ga\|i\(?:ff\(?:64\)?\|le\|m\)\|tf\)\|uyvy\|v\(?:da\|i\(?:car\|d\|ff\)\|st\)\|w\(?:bmp\|pg\)\|x\(?:bm\|cf\|pm\|wd\|[cv]\)\|y\(?:cbcra?\|uv\)\)\' . image-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))** Restclient#+BEGIN_SRC emacs-lisp(use-package restclient  :ensure t)#+END_SRC** Chess-mode for fun#+BEGIN_SRC emacs-lisp;; This also requires an external chess engine such as gnuchess or crafty(use-package chess  :ensure t)#+END_SRC#+RESULTS:* Org Mode Stuff** Aesthetics, customizations#+BEGIN_SRC emacs-lisp  (use-package org-superstar  ;; Improved version of org-bullets    :ensure t    :config    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))      (setq org-startup-indented t)           ;; Indent according to section  (setq org-startup-with-inline-images t) ;; Display images in-buffer by default#+END_SRC** Evil-org for evil-mode integrationThis is very fancy, it treats org-mode elements (i.e. sections, source blocks, tables)as regular text objects ( 'ae' object ). Additionally, it allows reordering stuff usingM-j, M-k, M-l and M-h instead of the regular M-<arrow keys>.Operators that deal with indentation ( < and > ) also indent headers.#+BEGIN_SRC emacs-lisp(use-package evil-org  :ensure t  :after (evil org)  :config  (add-hook 'org-mode-hook 'evil-org-mode)  (add-hook 'evil-org-mode-hook            (lambda ()              (evil-org-set-key-theme '(navigation insert textobjects additional calendar))))  (require 'evil-org-agenda)  (evil-org-agenda-set-keys))#+END_SRC#+RESULTS:: t** Org-agenda#+BEGIN_SRC emacs-lisp(setq org-agenda-custom-commands   '(("h" "Daily habits"      ((agenda ""))      ((org-agenda-show-log t)       (org-agenda-ndays 7)       (org-agenda-log-mode-items '(state))       (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:"))))))#+END_SRC#+RESULTS:| h | Daily habits | ((agenda )) | ((org-agenda-show-log t) (org-agenda-ndays 7) (org-agenda-log-mode-items (quote (state))) (org-agenda-skip-function (quote (org-agenda-skip-entry-if (quote notregexp) :DAILY:)))) |** Org-babel#+BEGIN_SRC emacs-lisp(org-babel-do-load-languages 'org-babel-load-languages '((python . t)))#+END_SRC#+RESULTS:* Elisp Stuff** ParEdit modeThis minor mode for Elisp balances quotes and parenthesis automatically#+BEGIN_SRC emacs-lisp  (use-package paredit    :ensure t)  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)#+END_SRC* LaTeX Stuff #+BEGIN_SRC emacs-lisp; Auctex stuff  (setq TeX-auto-save t) (setq TeX-parse-self t) (setq-default TeX-master nil) (add-to-list 'org-latex-packages-alist '("" "listings" nil)) (setq org-latex-listings t)    (setq org-latex-listings-options '(("breaklines" "true"))) (use-package auctex   :ensure t)     (add-hook 'LaTeX-mode-hook 'visual-line-mode) (add-hook 'LaTeX-mode-hook 'flyspell-mode) (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode) (add-hook 'LaTeX-mode-hook 'turn-on-reftex) (setq reftex-plug-into-AUCTeX t) #+END_SRC  #+RESULTS: * Skeletons** Latex#+BEGIN_SRC emacs-lisp(define-skeleton latex-skeleton"Skeleton for article type latex documents""Preamble:""\\documentclass{article}\n""\\usepackage[utf8]{inputenc}\n""\\usepackage[margin=1 in]{geometry}\n""\\usepackage{graphicx}\n""\\setlength{\\parindent}{4em}\n""\\setlength{\\parskip}{1em}\n""\\renewcommand{\\baselinestretch}{1.5}\n\n""\\author{Matheus Augusto da Silva}\n""\\title{"_"}\n""\\date{\\today}\n\n""\\begin{document}\n""\\maketitle\n\n""\\end{document}\n")#+END_SRC** Org mode#+BEGIN_SRC emacs-lisp(define-skeleton org-latex-summary"Skeleton for summaries ""Preamble:""#+LATEX_CLASS: article\n""#+LATEX_CLASS_OPTIONS: [a5paper,landscape,fourcolumn]\n""#+LATEX_COMPILER: lualatex\n""#+LATEX_HEADER: \\input{/home/trajanus/Documents/LaTeX/summaryheader.tex}\n""#+STARTUP: showeverything\n""#+OPTIONS: toc:nil\n""\\begin{multicols*}{4}\n""* "_"\n""\\end{multicols*}\n")#+END_SRC#+BEGIN_SRC emacs-lisp(define-skeleton org-latex-article"Skeleton for articles ""Preamble:""#+STARTUP: showeverything\n""#+TITLE: TITLE\n""#+AUTHOR: Matheus Augusto da Silva\n""#+DATE: \\today\n""#+LATEX_CLASS: article\n""#+LATEX_CLASS_OPTIONS: [a4paper]\n""#+LATEX_HEADER: \\input{/home/trajanus/Documents/LaTeX/articleheader.tex}\n""#+STARTUP: showeverything\n""#+OPTIONS: toc:nil\n")#+END_SRC#+BEGIN_SRC emacs-lisp(define-skeleton org-wiki-entry"Skeleton for articles ""Preamble:""#+STARTUP: showeverything\n""#+TITLE: "_"\n""#+AUTHOR: Matheus Augusto da Silva\n""#+STARTUP: showeverything\n""\n""* Index")#+END_SRC#+BEGIN_SRC emacs-lisp(define-skeleton org-wiki-index"Skeleton for articles ""Preamble:""#+STARTUP: showeverything\n""#+TITLE: "_"\n""#+AUTHOR: Matheus Augusto da Silva\n""#+STARTUP: showeverything\n""\n""* Index\n""\n""** Summaries\n""[[./summaries/summaries.org][Summaries]]")#+END_SRC* Language Related #+BEGIN_SRC emacs-lisp ;; This requires SDCV  ;; This little function looks in a stardict file for words that look like ;; the word under the cursor. I use it when correcting my spelling in french(defun dict-search ()  (interactive)  (add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)  (shell-command (format "export STARDICT_DATA_DIR=/home/trajanus/Documents/Stardict ;sdcv %s | head -5" (thing-at-point 'word))))(define-key evil-normal-state-map (kbd "ç") 'ispell-word)(define-key evil-normal-state-map (kbd "Ç") 'dict-search)  #+END_SRC  #+RESULTS: : dict-search ,V
(default ((t (:family "fixed" :foundry "misc" :slant normal :weight normal :height 151 :width normal))))),V
;; Added by Package.el.  This must come before configurations of;; installed packages.  Don't delete this line.  If you don't want it,;; just comment it out by adding a semicolon to the start of the line.;; You may delete these explanatory comments.(package-initialize)(custom-set-variables ;; custom-set-variables was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. '(ansi-color-names-vector   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff" "#eeeeec"]) '(custom-enabled-themes (quote (tsdh-dark))) '(package-selected-packages (quote (ace-window org))))(custom-set-faces ;; custom-set-faces was added by Custom. ;; If you edit it by hand, you could mess it up, so be careful. ;; Your init file should contain only one such instance. ;; If there is more than one, they won't work right. ',v
,v
side my head, the tone of my response is very different. *Fuck yes, we want to get married.* ,v
would ,v
',v
+ 211                                                                                                                                                                                                        ,V
camera,v
 ,v
My back is still turned to my laptop.,v
define: antipathy,v
With a city official presiding over the ceremony on Microsoft Teams. ,V
By June 2020, we went back on our agreement to decrease communication. It started with little jokes. Then memes. Then we'd laugh over something Allison had done,v
obvious,v
and ,v
try ,v
March ,v
early ,v
Th,V
e,v
Sri Siva Subramania Swami Kovil,v
d,v
s,v
earlier, dear reader, you may have detected a certain antagonism when I alluded to the wedding industrial complex, but I have to admit now that they got to me too. And it was in the planning of the wedding that we ran into distress, disagreement, and tears. ,v
Sri Ponnambalavaneswara Devasthanam,v
during,v
I,v
.,v
Looking back now, I am glad I made those mistakes that led me to towards therapy; as September drew closer, the scarier the prospect of losing her became,v
bad ,v
July 2021 Fri 30 Jul 2021 08:04:43 PM +0530[Link](https://blog.medium.com/introducing-the-medium-writers-challenge-f8a95f6d17f),v
## THE SPACES THAT MADE US,v
MEDIUM WRITERS' CHALLENGE ,v
# MEDIUM WRITERS' CHALLENGE July 2021 Fri 30 Jul 2021 08:04:43 PM +0530[Link](https://blog.medium.com/introducing-the-medium-writers-challenge-f8a95f6d17f)## THE SPACES THAT MADE US,V
## THE SPACES THAT MADE US,v
2021_july_medium_writers_challenge,v
**DRAFT IDEAS** ,V
## SPACE*Whether we’re letting our imaginations run wild or focusing on what’s in front of us, our day-to-day lives are defined by space: living space, personal space, outer space. We make space. We claim space. We practice social distancing. We turn spaces into homes, into communities, into refuges, and we forge relationships with others and ourselves within those spaces. We wonder, with varying degrees of skepticism and belief, about the beings that occupy the space beyond our planet. However you define it, tell us a story about a role space has played in your life.*TAG: MWC SpaceJUDGES: Natalie Portman, Dao-Yi Chow, Bonsu Thompson,v
#,v
In the same tongue our phrases wear masks,Where light and shadow speak several dialects,Where your night is half a day behind me,Where you shiver at the same hour when I sweatWhere your world is tilted one way, and mine another.In the same tongue out phrases span many maps,Where the cartography of boundaries is our fate,Where the rivers that bound us are now damned,Where my sky is a different shade of blue to yours,Where the wind blows you one way, and me another.*In the same tongue out phrases span many histories,*Where time and space can no longer make us relate,Where the present and past are hostage to bloodlines,Where the future sums all out joys and miseries,Where we divide this nostalgia in half:A piece of me for you, a piece of you for me.,v
https://theena.net/images/pic01.jpg,v
Colombo ,v
,,v
Philldelphian ,v
Space ,v
o,v
r,v
love,v
forever ,v
c,v
between ,v
somewhere ,v
g,v
1,v
4,v
, ,v
she asked on the 13th of January 2020 over WhatsApp. ,v
I was in Sri Lanka, and she was in America, at the dawn of 2020 when we decided that we should get married. 'Decided' is such a strange choice of words to associate with marriage;  the global wedding industrial complex, and social media, has convinced and compelled us - yes, even us millennials who are increasingly finding the idea of marriage and grand weddings silly - that marriages have to be marked with ostentatious celebrations in real life, and that the carefully coordinated and choreographed imagery arising from the grand revelry be shared on our social feeds.I If a wedding happened in front of no one, did it happen at all?'Do you want to get married?', she asked one day on the 13th of January over WhatsApp. I was on my commute to work through Colombo's morning traffic; she was in bed, in her parents' home in Philadelphia.,v
 was in Sri Lanka, and she was in America, at the dawn of 2020 when we decided that we should get married. ,V
 If a wedding happened in front of no one, did it happen at all?'Do you want to get married?', she asked one day on the 13th of January over WhatsApp. I was on my commute to work through Colombo's morning traffic; she was in bed, in her parents' home in Philadelphia.'Do you want to get married?', she asked on the 13th of January 2020 over WhatsApp. I was on my commute to work through Colombo's morning traffic; she was in, in her parents' home in Philadelphia. I said 'yes' with little hesitation. Five minutes later, we decided to get married. Then she went to bed, while I went about my day at the advertising agency. ,v
I was in Sri Lanka, and she was in America, at the dawn of 2020 when we decided that we should get married. 'Decided' is such a strange choice of words to associate with marriage;  the global wedding industrial complex, and social media, has convinced and compelled us - yes, even us millennials who are increasingly finding the idea of marriage and grand weddings silly - that marriages have to be marked with ostentatious celebrations in real life, and that the carefully coordinated and choreographed imagery arising from the grand revelry be shared on our social feeds. If a wedding happened in front of no one, did it happen at all? ,v
that,v
REENTRYTell us about an experience you’ve had coming back to something — or someone — after time away. What changed in your absence? How did you change? What are the funny moments, faux pas, discomforts, and joys that came with returning to an old situation (or your pre-pandemic life) with new eyes?TAG: MWC ReentryJUDGES: Imani Perry, Julio Vincent Gambuto, Saeed Jones, Jude Ellison DoyleDEATHPeople die, of course, but so do other things. Ideals. Relationships. Jobs. Life phases. Pieces of who we once were. A death isn’t always inherently sad, either; sometimes, it’s a positive step, freeing us from what was weighing us down or allowing us to move forward. Illusions can die. Grudges. Bad habits. Tell us about a death you’ve experienced, for better or worse, and how you marked the loss — whether it was with mourning or celebration.TAG: MWC DeathJUDGES: Susan Orlean, Robert Kolker, kelly corrigan, Eve L. EwingWORK“Work” is a term that contains multitudes. Maybe your work is a key pillar of your identity. Maybe it’s the thing that allows you to focus on other pursuits. Maybe it fulfills you; maybe it drains you. Maybe the real work in your life isn’t the same as the way you make money. We want to know what “work” means to you — and the factors that have shaped your thinking. What’s the most important work you do, however you define it? What’s the value of work in your life? What’s your dream job? Is there such a thing as a dream job? Is there a moment, a person, a role that’s changed the way you approach your work?TAG: MWC WorkJUDGES: Roxane Gay, Kurt Andersen, David Dennis, Jr.SPACEWhether we’re letting our imaginations run wild or focusing on what’s in front of us, our day-to-day lives are defined by space: living space, personal space, outer space. We make space. We claim space. We practice social distancing. We turn spaces into homes, into communities, into refuges, and we forge relationships with others and ourselves within those spaces. We wonder, with varying degrees of skepticism and belief, about the beings that occupy the space beyond our planet. However you define it, tell us a story about a role space has played in your life.TAG: MWC SpaceJUDGES: Natalie Portman, Dao-Yi Chow, Bonsu Thompson,V
https://blog.medium.com/introducing-the-medium-writers-challenge-f8a95f6d17f,v
REENTRYTell us about an experience you’ve had coming back to something — or someone — after time away. What changed in your absence? How did you change? What are the funny moments, faux pas, discomforts, and joys that came with returning to an old situation (or your pre-pandemic life) with new eyes?TAG: MWC ReentryJUDGES: Imani Perry, Julio Vincent Gambuto, Saeed Jones, Jude Ellison DoyleDEATHPeople die, of course, but so do other things. Ideals. Relationships. Jobs. Life phases. Pieces of who we once were. A death isn’t always inherently sad, either; sometimes, it’s a positive step, freeing us from what was weighing us down or allowing us to move forward. Illusions can die. Grudges. Bad habits. Tell us about a death you’ve experienced, for better or worse, and how you marked the loss — whether it was with mourning or celebration.TAG: MWC DeathJUDGES: Susan Orlean, Robert Kolker, kelly corrigan, Eve L. EwingWORK“Work” is a term that contains multitudes. Maybe your work is a key pillar of your identity. Maybe it’s the thing that allows you to focus on other pursuits. Maybe it fulfills you; maybe it drains you. Maybe the real work in your life isn’t the same as the way you make money. We want to know what “work” means to you — and the factors that have shaped your thinking. What’s the most important work you do, however you define it? What’s the value of work in your life? What’s your dream job? Is there such a thing as a dream job? Is there a moment, a person, a role that’s changed the way you approach your work?TAG: MWC WorkJUDGES: Roxane Gay, Kurt Andersen, David Dennis, Jr.SPACEWhether we’re letting our imaginations run wild or focusing on what’s in front of us, our day-to-day lives are defined by space: living space, personal space, outer space. We make space. We claim space. We practice social distancing. We turn spaces into homes, into communities, into refuges, and we forge relationships with others and ourselves within those spaces. We wonder, with varying degrees of skepticism and belief, about the beings that occupy the space beyond our planet. However you define it, tell us a story about a role space has played in your life.TAG: MWC SpaceJUDGES: Natalie Portman, Dao-Yi Chow, Bonsu Thompson,v
develop a commercial proposition for a product or service of your choice and try to sell it to two different people positioned on the extreme edges of a particular intrinsic program spectrum.You will choose one intrinsic program from among the ones presented in the course (towards/away from, options/procedures, in time/through time, detail/global, feeling/thinking).The product or service can  be a product that you are going to create for your own company in the future, or a product produced by your current company.,v
- ,V
=,v
#week-1,v
                                                                                                   75                                                                                                                                       ,v
I hope you are taking time out to c,v
:,v
;; NOTE: init.el is now generated from Emacs.org.  Please edit that file;;       in Emacs and init.el will be generated automatically!;; You will most likely need to adjust this font size for your system!(defvar efs/default-font-size 180)(defvar efs/default-variable-font-size 180);; Make frame transparency overridable(defvar efs/frame-transparency '(90 . 90));; The default is 800 kilobytes.  Measured in bytes.(setq gc-cons-threshold (* 50 1000 1000))(defun efs/display-startup-time ()  (message "Emacs loaded in %s with %d garbage collections."           (format "%.2f seconds"                   (float-time                     (time-subtract after-init-time before-init-time)))           gcs-done))(add-hook 'emacs-startup-hook #'efs/display-startup-time);; Initialize package sources(require 'package)(setq package-archives '(("melpa" . "https://melpa.org/packages/")                         ("org" . "https://orgmode.org/elpa/")                         ("elpa" . "https://elpa.gnu.org/packages/")))(package-initialize)(unless package-archive-contents  (package-refresh-contents))  ;; Initialize use-package on non-Linux platforms(unless (package-installed-p 'use-package)  (package-install 'use-package))(require 'use-package)(setq use-package-always-ensure t)(use-package auto-package-update  :custom  (auto-package-update-interval 7)  (auto-package-update-prompt-before-update t)  (auto-package-update-hide-results t)  :config  (auto-package-update-maybe)  (auto-package-update-at-time "09:00"));; NOTE: If you want to move everything out of the ~/.emacs.d folder;; reliably, set `user-emacs-directory` before loading no-littering!;(setq user-emacs-directory "~/.cache/emacs")(use-package no-littering);; no-littering doesn't set this by default so we must place;; auto save files in the same path as it uses for sessions(setq auto-save-file-name-transforms      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))(setq inhibit-startup-message t)(scroll-bar-mode -1)        ; Disable visible scrollbar(tool-bar-mode -1)          ; Disable the toolbar(tooltip-mode -1)           ; Disable tooltips(set-fringe-mode 10)        ; Give some breathing room(menu-bar-mode -1)            ; Disable the menu bar;; Set up the visible bell(setq visible-bell t)(column-number-mode)(global-display-line-numbers-mode t);; Set frame transparency(set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)(add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))(set-frame-parameter (selected-frame) 'fullscreen 'maximized)(add-to-list 'default-frame-alist '(fullscreen . maximized));; Disable line numbers for some modes(dolist (mode '(org-mode-hook                term-mode-hook                shell-mode-hook                treemacs-mode-hook                eshell-mode-hook))  (add-hook mode (lambda () (display-line-numbers-mode 0))))(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size);; Set the fixed pitch face(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size);; Set the variable pitch face(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular);; Make ESC quit prompts(global-set-key (kbd "<escape>") 'keyboard-escape-quit)(use-package general  :after evil  :config  (general-create-definer efs/leader-keys    :keymaps '(normal insert visual emacs)    :prefix "SPC"    :global-prefix "C-SPC")  (efs/leader-keys    "t"  '(:ignore t :which-key "toggles")    "tt" '(counsel-load-theme :which-key "choose theme")    "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))(use-package evil  :init  (setq evil-want-integration t)  (setq evil-want-keybinding nil)  (setq evil-want-C-u-scroll t)  (setq evil-want-C-i-jump nil)  :config  (evil-mode 1)  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)  ;; Use visual line motions even outside of visual-line-mode buffers  (evil-global-set-key 'motion "j" 'evil-next-visual-line)  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)  (evil-set-initial-state 'messages-buffer-mode 'normal)  (evil-set-initial-state 'dashboard-mode 'normal))(use-package evil-collection  :after evil  :config  (evil-collection-init))(use-package command-log-mode  :commands command-log-mode)(use-package doom-themes  :init (load-theme 'doom-palenight t))(use-package all-the-icons)(use-package doom-modeline  :init (doom-modeline-mode 1)  :custom ((doom-modeline-height 15)))(use-package which-key  :defer 0  :diminish which-key-mode  :config  (which-key-mode)  (setq which-key-idle-delay 1))(use-package ivy  :diminish  :bind (("C-s" . swiper)         :map ivy-minibuffer-map         ("TAB" . ivy-alt-done)         ("C-l" . ivy-alt-done)         ("C-j" . ivy-next-line)         ("C-k" . ivy-previous-line)         :map ivy-switch-buffer-map         ("C-k" . ivy-previous-line)         ("C-l" . ivy-done)         ("C-d" . ivy-switch-buffer-kill)         :map ivy-reverse-i-search-map         ("C-k" . ivy-previous-line)         ("C-d" . ivy-reverse-i-search-kill))  :config  (ivy-mode 1))(use-package ivy-rich  :after ivy  :init  (ivy-rich-mode 1))(use-package counsel  :bind (("C-M-j" . 'counsel-switch-buffer)         :map minibuffer-local-map         ("C-r" . 'counsel-minibuffer-history))  :custom  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)  :config  (counsel-mode 1))(use-package ivy-prescient  :after counsel  :custom  (ivy-prescient-enable-filtering nil)  :config  ;; Uncomment the following line to have sorting remembered across sessions!  ;(prescient-persist-mode 1)  (ivy-prescient-mode 1))(use-package helpful  :commands (helpful-callable helpful-variable helpful-command helpful-key)  :custom  (counsel-describe-function-function #'helpful-callable)  (counsel-describe-variable-function #'helpful-variable)  :bind  ([remap describe-function] . counsel-describe-function)  ([remap describe-command] . helpful-command)  ([remap describe-variable] . counsel-describe-variable)  ([remap describe-key] . helpful-key))(use-package hydra  :defer t)(defhydra hydra-text-scale (:timeout 4)  "scale text"  ("j" text-scale-increase "in")  ("k" text-scale-decrease "out")  ("f" nil "finished" :exit t))(efs/leader-keys  "ts" '(hydra-text-scale/body :which-key "scale text"))(defun efs/org-font-setup ()  ;; Replace list hyphen with dot  (font-lock-add-keywords 'org-mode                          '(("^ *\\([-]\\) "                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))  ;; Set faces for heading levels  (dolist (face '((org-level-1 . 1.2)                  (org-level-2 . 1.1)                  (org-level-3 . 1.05)                  (org-level-4 . 1.0)                  (org-level-5 . 1.1)                  (org-level-6 . 1.1)                  (org-level-7 . 1.1)                  (org-level-8 . 1.1)))    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))  ;; Ensure that anything that should be fixed-pitch in Org files appears that way  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))(defun efs/org-mode-setup ()  (org-indent-mode)  (variable-pitch-mode 1)  (visual-line-mode 1))(use-package org  :pin org  :commands (org-capture org-agenda)  :hook (org-mode . efs/org-mode-setup)  :config  (setq org-ellipsis " ▾")  (setq org-agenda-start-with-log-mode t)  (setq org-log-done 'time)  (setq org-log-into-drawer t)  (setq org-agenda-files        '("~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org"          "~/Projects/Code/emacs-from-scratch/OrgFiles/Habits.org"          "~/Projects/Code/emacs-from-scratch/OrgFiles/Birthdays.org"))  (require 'org-habit)  (add-to-list 'org-modules 'org-habit)  (setq org-habit-graph-column 60)  (setq org-todo-keywords    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))  (setq org-refile-targets    '(("Archive.org" :maxlevel . 1)      ("Tasks.org" :maxlevel . 1)))  ;; Save Org buffers after refiling!  (advice-add 'org-refile :after 'org-save-all-org-buffers)  (setq org-tag-alist    '((:startgroup)       ; Put mutually exclusive tags here       (:endgroup)       ("@errand" . ?E)       ("@home" . ?H)       ("@work" . ?W)       ("agenda" . ?a)       ("planning" . ?p)       ("publish" . ?P)       ("batch" . ?b)       ("note" . ?n)       ("idea" . ?i)))  ;; Configure custom agenda views  (setq org-agenda-custom-commands   '(("d" "Dashboard"     ((agenda "" ((org-deadline-warning-days 7)))      (todo "NEXT"        ((org-agenda-overriding-header "Next Tasks")))      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))    ("n" "Next Tasks"     ((todo "NEXT"        ((org-agenda-overriding-header "Next Tasks")))))    ("W" "Work Tasks" tags-todo "+work-email")    ;; Low-effort next actions    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"     ((org-agenda-overriding-header "Low Effort Tasks")      (org-agenda-max-todos 20)      (org-agenda-files org-agenda-files)))    ("w" "Workflow Status"     ((todo "WAIT"            ((org-agenda-overriding-header "Waiting on External")             (org-agenda-files org-agenda-files)))      (todo "REVIEW"            ((org-agenda-overriding-header "In Review")             (org-agenda-files org-agenda-files)))      (todo "PLAN"            ((org-agenda-overriding-header "In Planning")             (org-agenda-todo-list-sublevels nil)             (org-agenda-files org-agenda-files)))      (todo "BACKLOG"            ((org-agenda-overriding-header "Project Backlog")             (org-agenda-todo-list-sublevels nil)             (org-agenda-files org-agenda-files)))      (todo "READY"            ((org-agenda-overriding-header "Ready for Work")             (org-agenda-files org-agenda-files)))      (todo "ACTIVE"            ((org-agenda-overriding-header "Active Projects")             (org-agenda-files org-agenda-files)))      (todo "COMPLETED"            ((org-agenda-overriding-header "Completed Projects")             (org-agenda-files org-agenda-files)))      (todo "CANC"            ((org-agenda-overriding-header "Cancelled Projects")             (org-agenda-files org-agenda-files)))))))  (setq org-capture-templates    `(("t" "Tasks / Projects")      ("tt" "Task" entry (file+olp "~/Projects/Code/emacs-from-scratch/OrgFiles/Tasks.org" "Inbox")           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)      ("j" "Journal Entries")      ("jj" "Journal" entry           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")           :clock-in :clock-resume           :empty-lines 1)      ("jm" "Meeting" entry           (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"           :clock-in :clock-resume           :empty-lines 1)      ("w" "Workflows")      ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)      ("m" "Metrics Capture")      ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))  (define-key global-map (kbd "C-c j")    (lambda () (interactive) (org-capture nil "jj")))  (efs/org-font-setup))(use-package org-bullets  :hook (org-mode . org-bullets-mode)  :custom  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))(defun efs/org-mode-visual-fill ()  (setq visual-fill-column-width 100        visual-fill-column-center-text t)  (visual-fill-column-mode 1))(use-package visual-fill-column  :hook (org-mode . efs/org-mode-visual-fill))(with-eval-after-load 'org  (org-babel-do-load-languages      'org-babel-load-languages      '((emacs-lisp . t)      (python . t)))  (push '("conf-unix" . conf-unix) org-src-lang-modes))(with-eval-after-load 'org  ;; This is needed as of Org 9.2  (require 'org-tempo)  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))  (add-to-list 'org-structure-template-alist '("py" . "src python")));; Automatically tangle our Emacs.org config file when we save it(defun efs/org-babel-tangle-config ()  (when (string-equal (file-name-directory (buffer-file-name))                      (expand-file-name user-emacs-directory))    ;; Dynamic scoping to the rescue    (let ((org-confirm-babel-evaluate nil))      (org-babel-tangle))))(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))(defun efs/lsp-mode-setup ()  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))  (lsp-headerline-breadcrumb-mode))(use-package lsp-mode  :commands (lsp lsp-deferred)  :hook (lsp-mode . efs/lsp-mode-setup)  :init  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'  :config  (lsp-enable-which-key-integration t))(use-package lsp-ui  :hook (lsp-mode . lsp-ui-mode)  :custom  (lsp-ui-doc-position 'bottom))(use-package lsp-treemacs  :after lsp)(use-package lsp-ivy  :after lsp)(use-package dap-mode  ;; Uncomment the config below if you want all UI panes to be hidden by default!  ;; :custom  ;; (lsp-enable-dap-auto-configure nil)  ;; :config  ;; (dap-ui-mode 1)  :commands dap-debug  :config  ;; Set up Node debugging  (require 'dap-node)  (dap-node-setup) ;; Automatically installs Node debug adapter if needed  ;; Bind `C-c l d` to `dap-hydra` for easy access  (general-define-key    :keymaps 'lsp-mode-map    :prefix lsp-keymap-prefix    "d" '(dap-hydra t :wk "debugger")))(use-package typescript-mode  :mode "\\.ts\\'"  :hook (typescript-mode . lsp-deferred)  :config  (setq typescript-indent-level 2))(use-package python-mode  :ensure t  :hook (python-mode . lsp-deferred)  :custom  ;; NOTE: Set these if Python 3 is called "python3" on your system!  ;; (python-shell-interpreter "python3")  ;; (dap-python-executable "python3")  (dap-python-debugger 'debugpy)  :config  (require 'dap-python))(use-package pyvenv  :after python-mode  :config  (pyvenv-mode 1))(use-package company  :after lsp-mode  :hook (lsp-mode . company-mode)  :bind (:map company-active-map         ("<tab>" . company-complete-selection))        (:map lsp-mode-map         ("<tab>" . company-indent-or-complete-common))  :custom  (company-minimum-prefix-length 1)  (company-idle-delay 0.0))(use-package company-box  :hook (company-mode . company-box-mode))(use-package projectile  :diminish projectile-mode  :config (projectile-mode)  :custom ((projectile-completion-system 'ivy))  :bind-keymap  ("C-c p" . projectile-command-map)  :init  ;; NOTE: Set this to the folder where you keep your Git repos!  (when (file-directory-p "~/Projects/Code")    (setq projectile-project-search-path '("~/Projects/Code")))  (setq projectile-switch-project-action #'projectile-dired))(use-package counsel-projectile  :after projectile  :config (counsel-projectile-mode))(use-package magit  :commands magit-status  :custom  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1));; NOTE: Make sure to configure a GitHub token before using this package!;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started(use-package forge  :after magit)(use-package evil-nerd-commenter  :bind ("M-/" . evilnc-comment-or-uncomment-lines))(use-package rainbow-delimiters  :hook (prog-mode . rainbow-delimiters-mode))(use-package term  :commands term  :config  (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))(use-package eterm-256color  :hook (term-mode . eterm-256color-mode))(use-package vterm  :commands vterm  :config  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt  ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch  (setq vterm-max-scrollback 10000))(when (eq system-type 'windows-nt)  (setq explicit-shell-file-name "powershell.exe")  (setq explicit-powershell.exe-args '()))(defun efs/configure-eshell ()  ;; Save command history when commands are entered  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)  ;; Truncate buffer for performance  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)  ;; Bind some useful keys for evil-mode  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)  (evil-normalize-keymaps)  (setq eshell-history-size         10000        eshell-buffer-maximum-lines 10000        eshell-hist-ignoredups t        eshell-scroll-to-bottom-on-input t))(use-package eshell-git-prompt  :after eshell)(use-package eshell  :hook (eshell-first-time-mode . efs/configure-eshell)  :config  (with-eval-after-load 'esh-opt    (setq eshell-destroy-buffer-when-process-dies t)    (setq eshell-visual-commands '("htop" "zsh" "vim")))  (eshell-git-prompt-use-theme 'powerline))(use-package dired  :ensure nil  :commands (dired dired-jump)  :bind (("C-x C-j" . dired-jump))  :custom ((dired-listing-switches "-agho --group-directories-first"))  :config  (evil-collection-define-key 'normal 'dired-mode-map    "h" 'dired-single-up-directory    "l" 'dired-single-buffer))(use-package dired-single  :commands (dired dired-jump))(use-package all-the-icons-dired  :hook (dired-mode . all-the-icons-dired-mode))(use-package dired-open  :commands (dired dired-jump)  :config  ;; Doesn't work as expected!  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)  (setq dired-open-extensions '(("png" . "feh")                                ("mkv" . "mpv"))))(use-package dired-hide-dotfiles  :hook (dired-mode . dired-hide-dotfiles-mode)  :config  (evil-collection-define-key 'normal 'dired-mode-map    "H" 'dired-hide-dotfiles-mode));; Make gc pauses faster by decreasing the threshold.(setq gc-cons-threshold (* 2 1000 1000)),V
`,v
cartoon,v
ehwghhwhws,V
