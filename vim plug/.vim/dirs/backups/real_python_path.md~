# REAL PYTHON SYLLABUS 

## INTRODUCTION TO PYTHON 3

- Why choose Python 
    - Python is popular 
    - Python is interpreted 
    - Python is free
    - Python is portable 
    - Python is simple 
    - Not that simple 

## Effective Virtual Environments for Python Development 

- Shells (Bash, Zsh, PowerShell)
- Terminals 
- Python Version Management 
     - Sometimes it is necessasry to work with current and past versions of Python for specific needs and software 
     - Linux based systems come with a *system Python* as well as the version of Python that the user installs 
     - In my case, I have the following versions of Python installed:
         - System python: 2.7.18
         - Python3: 3.8.5
- Virtual environments 
        - When managing multiple Python projects it is likely that you will be using more than one version of python; in such case, it is important to use virutal environments
        - This is because each Python project will have its own set of dependencies 
        - In order to avoid having these multiple versions of pythons, project and dependencies clash with one another, we use **Virtual Environments**
        - In python3, we use `venv` to create virtual environments as follows 
        
        > $ python -m venv ~/.virtualenvs/my-env 
    ** This creates a virtual environment by passing it a path at which to store the environment's python, installed packages and dependencies** 

        > $ source ~/.virtualenvs/my-env/bin/activate 
    ** This activates a virutal environment by sourcing its activate script**

        > (my-env)$ deactivate 
    ** This exits the virtual environment that you are in 

- Python Package Management 
    - For many of the projects you work on, you’ll probably need some number of third-party packages. Those packages may have their own dependencies in turn. In the early days of Python, using packages involved manually downloading files and pointing Python at them. Today, we’re fortunate to have a variety of package management tools available to us   
    - Most package managers work in tandem with virtual environments, isolating the packages you install in one Python environment from another. Using the two together is where you really start to see the power of the tools available to you.
    - pip (pip installs packages) has been the de facto standard for package management in Python for several years. It was heavily inspired by an earlier tool called easy_install. Python incorporated pip into the standard distribution starting in version 3.4. pip automates the process of downloading packages and making Python aware of them.
    - If you have multiple environments, you can use that in combination with pip to ensure that each project, its specific version of python, its dependencies and packages don't clash with one another as follows:
   

   > <code><span class="gp">$ </span>pyenv virtualenv <span class="m">3</span>.7.3 proj1
   > <span class="gp">$ </span>pyenv activate proj1
   > <span class="gp gp-VirtualEnv">(proj1)</span><span class="gp">$ </span>pip list
   > <span class="go">Package    Version</span>
   > <span class="go">---------- ---------</span>
   > <span class="go">pip        19.1.1</span>
   > <span class="go">setuptools 40.8.0</span>
   >
   > <span class="gp gp-VirtualEnv">(proj1)</span><span class="gp">$ </span>python -m pip install requests
   > <span class="go">Collecting requests</span>
   > <span class="go">  Downloading .../requests-2.22.0-py2.py3-none-any.whl (57kB)</span>
   > <span class="go">    100% |████████████████████████████████| 61kB 2.2MB/s</span>
   > <span class="go">Collecting chardet&lt;3.1.0,&gt;=3.0.2 (from requests)</span>
   > <span class="go">  Downloading .../chardet-3.0.4-py2.py3-none-any.whl (133kB)</span>
   > <span class="go">    100% |████████████████████████████████| 143kB 1.7MB/s</span>
   > <span class="go">Collecting certifi&gt;=2017.4.17 (from requests)</span>
   > <span class="go">  Downloading .../certifi-2019.6.16-py2.py3-none-any.whl (157kB)</span>
   > <span class="go">    100% |████████████████████████████████| 163kB 6.0MB/s</span>
   > <span class="go">Collecting urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 (from requests)</span>
   > <span class="go">  Downloading .../urllib3-1.25.3-py2.py3-none-any.whl (150kB)</span>
   > <span class="go">    100% |████████████████████████████████| 153kB 1.7MB/s</span>
   > <span class="go">Collecting idna&lt;2.9,&gt;=2.5 (from requests)</span>
   > <span class="go">  Downloading .../idna-2.8-py2.py3-none-any.whl (58kB)</span>
   > <span class="go">    100% |████████████████████████████████| 61kB 26.6MB/s</span>
   > <span class="go">Installing collected packages: chardet, certifi, urllib3, idna, requests</span>
   > <span class="go">Successfully installed packages</span>
   >
   > <span class="gp">$ </span>pip list
   > <span class="go">Package    Version</span>
   > <span class="go">---------- ---------</span>
   > <span class="go">certifi    2019.6.16</span>
   > <span class="go">chardet    3.0.4</span>
   > <span class="go">idna       2.8</span>
   > <span class="go">pip        19.1.1</span>
   > <span class="go">requests   2.22.0</span>
   > <span class="go">setuptools 40.8.0</span>
   > <span class="go">urllib3    1.25.3</span>
   > <p><code>
