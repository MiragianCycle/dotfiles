### Introduction

***Note*** *In the text below and subsequent pages, we refer to Software Engineers, Coders, Developers, and Programmers interchangeably* 

Git is like a really **epic save button** for your files and directories. Officially, Git is a version control system.

A *save* in a text editor records all of the words in a document as a single file. You are only ever given one record of the file, such as `essay.doc`, unless you make duplicate copies (which is difficult to remember to do and keep track of):

`essay-draft1.doc`, `essay-draft2.doc`, `essay-final.doc`

However, a *save* in Git records differences in the files and folders AND keeps a **historical record of each save**. This feature was a game changer in software engineering, but it also has applications for writers as we will see in the subsequent lessons. 

Git enables software engineers to review how projects grow and to easily look at or restore file states from the past. Once connected to a network, Git allows programmers to push projects to GitHub for sharing and collaborating with other developers.

While **Git** works on a *local* machine, **GitHub** is a *remote* storage facility on the web for all coding projects. These storage facilities are called repositories. This means that by learning Git, developers will get to showcase their portfolio on GitHub! This is really important because almost all software development companies consider using Git to be an **essential skill** for modern web developers.

### Why Git For Writers and Writing

You are probably wondering why you, a writer, has to learn a tool that is traditionally used for software engineering. There are two main motivations for learning Git if you are a writer:

1. Our current ways of recording changes, creating backups for our individual writing projects *suck* - yes cloud storage exists, but this is a dumb backup, having little to no historical record of each save. 

2. Writers need better collaboration tools. The free web-based office suites have their purpose, and are decent, but try working on large text files with a large number of collaborators. Personally, those documents become unreadable and I have to resort to creating new files so I can see the *current* state of the file, immediately losing the historical record of changes made, and who made them. 

Git solves both these issues in one go. The best part: it is free. 

### What is a Repository? 

The best explanation for what constitutes a repository is from [Eric Sink](https://ericsink.com/scm/scm_repositories.html), who defined it as:

> **Repository = File System * Time**
>
> A repository is the official place where you store all your source code.  It keeps track of all your files, as well as the layout of the directories in which they are stored.  It resides on a server where it can be shared by all the members of your team.
>
> But there has to be more.  If the definition in the previous paragraph were the whole story, then an SCM repository would be no more than a network file system.  A repository is much more than that.  A repository contains history.
>
> A file system is two-dimensional:  its space is defined by directories and files.  In contrast, a repository is three-dimensional:  it exists in a continuum defined by directories, files and time.  An SCM repository contains every version of your source code that has ever existed.  The additional dimension creates some rather interesting challenges in the architecture of a repository and the decisions about how it manages data. [^1]

We hope answered the question of *why* [Git](https://git-scm.com/) and [Github](https://desktop.github.com/) are valuable, albeit unorthodox, tools for writers.

In this lesson, we will briefly explore the history of Git, what it is, and what it's useful for.

In the next lesson, we will learn how to install Git and Github Desktop before we go over the basic workflow for using Git, which should enhance your understanding and demonstrate why Git is so useful.

Finally, you will set up a project with Git that will serve as a template for your future projects.

For now, let's learn what Git is and why it's so powerful!

### Learning Outcomes:
By the end of this lesson, you should be able to do the following:

 - Explain what Git and GitHub are and the differences between the two.
 - Describe the differences between Git and a text editor in terms of what they save and their record keeping.
 - Describe why Git is useful for an individual developer and a team of developers.

**NOTE** *Most of the online resources out there are based on software development workflows. We are currently working on a simplified video tutorial for writers. This section will be updated with the embedded video as soon as it is released*. 

### Assignment

<div class="lesson-content__panel" markdown="1">

[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/hwP7WQkmECE/0.jpg)](http://www.youtube.com/watch?v=hwP7WQkmECE)




  1. Read Chapter 1.1 through 1.4 in [this book about version control](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control) to learn the differences between local, centralized, and distributed version control systems.
  2. Watch [this video](https://www.youtube.com/watch?v=8oRjP8yj2Wo) about how Git can improve the workflow of both an individual and a team.
  3. Watch [this video](https://www.youtube.com/watch?v=1h9_cB9mPT8&feature=youtu.be&t=13s) for some history on Git and GitHub, and make sure you know the difference between the two. **Git** is a technology used in the command line while **GitHub** is a [website](https://github.com/) you can visit.
  4. Do you see any applications of Git and Github to your writing? How? Don't worry if you don't have the right answer yet. 
</div>

### Additional Resources
This section contains helpful links to other content. It isn't required, so consider it supplemental for if you need to dive deeper into something.

* [Git and GitHub in plain English](https://blog.red-badger.com/blog/2016/11/29/gitgithub-in-plain-english)
* [My Friend Git: Applying Software Version Control Principles and Tools To Creative Writing](https://invisiblepublishing.com/2017/07/12/my-friend-git/)


### REFERENCES 

[^1]: Sink, Eric. “Repositories.” Personal Site. Eric Sink (blog). Accessed May 20, 2020. https://ericsink.com/scm/scm_repositories.html.

